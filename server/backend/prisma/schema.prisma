// schema.prisma

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int        @id @default(autoincrement())
  username  String     @unique
  password  String
  role      String     @default("USER")
  language  String
  theme     String
  playlists Playlist[]
  data      Data[]
  medias    Media[]
}

model Media {
  id                 Int            @id @default(autoincrement())
  user_id            Int
  user               User           @relation(fields: [user_id], references: [id])
  original_file_name String
  file_name          String
  path               String
  format             String
  type               String
  size               Int
  uploaded_at        DateTime       @updatedAt
  thumbnail_id       Int?
  thumbnail          Media?         @relation("ThumbnailRelation", fields: [thumbnail_id], references: [id])
  thumbnailFor       Media[]        @relation("ThumbnailRelation")
  PlaylistItem       PlaylistItem[]
  DataBackground     Data[]         @relation("BackgroundRelation")
}

model Data {
  id            Int            @id @default(autoincrement())
  backgroundColor String?
  name          String?
  value         String?
  type          String?
  edit          Boolean        @default(true)
  user_id       Int
  background_id Int?
  user          User           @relation(fields: [user_id], references: [id])
  background    Media?         @relation("BackgroundRelation", fields: [background_id], references: [id])
  PlaylistItem  PlaylistItem[]
}

model PlaylistItem {
  id          Int      @id @default(autoincrement())
  playlist_id Int
  media_id    Int?
  data_id     Int?
  position    Int
  duration    Int
  playlist    Playlist @relation(fields: [playlist_id], references: [id], onDelete: Cascade)
  media       Media?   @relation(fields: [media_id], references: [id])
  data        Data?    @relation(fields: [data_id], references: [id])
}

model Playlist {
  id           Int            @id @default(autoincrement())
  name         String
  user_id      Int
  user         User           @relation(fields: [user_id], references: [id])
  PlaylistItem PlaylistItem[]
  Mode         Mode[]
}

model Mode {
  id          Int       @id @default(autoincrement())
  name        String?
  playlist_id Int?
  playlist    Playlist? @relation(fields: [playlist_id], references: [id])
}

model AppSettings {
  id                 Int      @id @default(autoincrement())
  standby            Boolean
  standby_start_time String
  standby_end_time   String
  restart_at         String
  updated_at         DateTime @updatedAt
  language           String
  theme              String
  brightness         Int
}
